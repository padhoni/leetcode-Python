class Trie:
    class tNode:
        def __init__(self):
            self.storeChild = [None for _ in range(26)]
            self.isFlag = False

    def __init__(self):
        self.root = self.tNode()

    def insert(self, word: str) -> None:
        curr = self.root
        for c in word:
            index = ord(c) - ord('a')
            if curr.storeChild[index] == None:
                curr.storeChild[index] = self.tNode()
            curr = curr.storeChild[index]
        curr.isFlag = True  # Mark the end of the word

    def search(self, word: str) -> bool:
        curr = self.root
        for c in word:
            index = ord(c) - ord('a')
            if curr.storeChild[index] == None:
                return False
            curr = curr.storeChild[index]
        return curr.isFlag  # Check if the word exists in the trie

    def startsWith(self, prefix: str) -> bool:
        curr = self.root
        for c in prefix:
            index = ord(c) - ord('a')
            if curr.storeChild[index] == None:
                return False
            curr = curr.storeChild[index]
        return True  # If traversal is successful, prefix exists

# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
