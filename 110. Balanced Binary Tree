class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        if root is None:
            return True  # An empty tree is balanced
        return self.heightCalc(root) != -1

    def heightCalc(self, root: Optional[TreeNode]) -> int:
        if root is None:
            return 0  # Height of an empty tree is 0

        # Calculate height of left subtree
        left_height = self.heightCalc(root.left)
        if left_height == -1:  # Left subtree is unbalanced
            return -1

        # Calculate height of right subtree
        right_height = self.heightCalc(root.right)
        if right_height == -1:  # Right subtree is unbalanced
            return -1

        # Check if current node is balanced
        if abs(left_height - right_height) > 1:
            return -1  # Current node is unbalanced

        # Return the height of the current node
        return max(left_height, right_height) + 1
