from typing import List

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        len1 = len(nums)
        if len1 == 0 or target < nums[0] or target > nums[len1 - 1]:
            return [-1, -1]

        l, r = 0, len1 - 1
        mid = (l + r) // 2

        if target < nums[mid]:
            r = mid - 1
        elif target > nums[mid]:
            l = mid + 1
        else:
            l1 = self.leftfunc1(l, mid, nums, target)
            r1 = self.rightfunc1(mid, r, nums, target)
            return [l1, r1]

        l1 = self.leftfunc1(l, r, nums, target)
        r1 = self.rightfunc1(l, r, nums, target)
        return [l1, r1]

    def leftfunc1(self, l, r, nums, target):
        l1 = -1  # Initialize as -1 to indicate "not found"
        while l <= r:
            mid = (l + r) // 2
            if nums[mid] == target:
                l1 = mid
                r = mid - 1  # Narrow search to the left
            elif nums[mid] < target:
                l = mid + 1
            else:
                r = mid - 1
        return l1

    def rightfunc1(self, l, r, nums, target):
        r1 = -1  # Initialize as -1 to indicate "not found"
        while l <= r:
            mid = (l + r) // 2
            if nums[mid] == target:
                r1 = mid
                l = mid + 1  # Narrow search to the right
            elif nums[mid] < target:
                l = mid + 1
            else:
                r = mid - 1
        return r1
